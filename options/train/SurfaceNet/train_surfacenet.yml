# general settings
# name: 001_SurfaceNet # resnet101, dual conv after aspp
# name: 002_SurfaceNet  # resnet50, single conv after aspp
# name: 003_SurfaceNet  # lazy optimize discriminator, small GANLOSS
# name: 004_SurfaceNet  # normal weight, real->0, fake->1
# name: 005_SurfaceNet  # real->1, fake->0, BCELoss, opt_d_every 10
# name: 006_SurfaceNet  # sum l1 + gan + msssim
name: 007_SurfaceNet  # mean 100*l1 + 0.15*gan + 88*msssim

model_type: SurfaceNetModel
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 10

# dataset and data loader settings
datasets:
  train:
    name: SurfaceNetDataset
    type: SurfaceNetDataset
    brdf_args:
      nbRendering: 1
      size: 256
      order: pndrs
      lampIntensity: 12
    # dataroot_train: D:/Datasets/svBRDFs/testBlended
    svbrdf_root: /home/hdr/disks/D/Datasets/svBRDFs/trainBlended
    io_backend: 
      type: disk
    gamma: true
    # data loader
    use_shuffle: true
    num_worker_per_gpu: 4
    batch_size_per_gpu: 4
    dataset_enlarge_ratio: 1
    prefetch_mode: cuda
    pin_memory: true

  val:
    name: SurfaceNetDataset
    type: SurfaceNetDataset
    brdf_args:
      nbRendering: 1
      size: 256
      order: pndrs
      lampIntensity: 12
    svbrdf_root: /home/hdr/disks/D/Datasets/svBRDFs/testBlended
    io_backend: 
      type: disk
    len: 4

# network structures
network_g:
  type: SurfaceNet
  brdf_args:
    nbRendering: 3
    size: 256
    order: pndrs
    toLDR: True
  outputMapping:
    Normal: 3
    Diffuse: 3
    Roughness: 1
    Specular: 3

network_d:
  type: PatchDiscriminator
# path
path:
  # pretrain_network_g: ~
  strict_load_g: true
  # resume_state: experiments/001_SurfaceNet/training_states/609.state

# training settings
train:
  optim_g:
    type: Adam
    lr: !!float 4e-5
    weight_decay: 0
    betas: [0.9, 0.999]
  optim_d:
    type: Adam
    lr: !!float 4e-5
    weight_decay: 0
    betas: [0.9, 0.999]
  # scheduler:
  #   type: CosineAnnealingRestartLR
  #   periods: [20000, 30000, 100000, 200000, 300000]
  #   restart_weights: [1, 0.5, 0.5, 0.5, 0.5]
  #   eta_min: !!float 1e-7
  # scheduler:
  #   type: CosineAnnealingRestartLR
  #   periods: [10000, 10000, 30000, 100000, 150000, 300000]
  #   restart_weights: [1, 0.5, 0.5, 0.5, 0.5, 0.2]
  #   eta_min: !!float 1e-7
  scheduler:
    type: MultiStepRestartLR
    milestones: [350000, 400000]
    # milestones: [1,5,10,15]
  opt_d_every: 1
  total_iter: 350000
  warmup_iter: -1  # no warm up

  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 100
    reduction: mean
  msssim_opt:
    type: MSSSIMLoss
    window_size: 11
    normaliza: True
    loss_weight: 88
  gan_opt:
    type: GANLoss
    gan_type: vanilla
    real_label_val: 1.0
    fake_label_val: 0.0
    loss_weight: 0.15

  # hyperparameter
  # alpha: 0.15
  # belta: 0.88
  # losses
  # cos_opt:
  #   type: CosineLoss
  #   loss_weight: 0.5
  #   reduction: mean

# validation settings
val:
  val_freq: !!float 2e4
  save_img: true
  save_gt: true

  metrics:
    # cosine: # metric name, can be arbitrary
    #   type: cos
    #   weight: 2
    pixel: # metric name, can be arbitrary
      type: pix
      weight: 1

# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: !!float 5e4
  use_tb_logger: true